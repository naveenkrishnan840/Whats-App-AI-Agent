import os
from io import BytesIO
import base64
import sqlite3
from datetime import datetime
from fastapi import FastAPI, APIRouter, Request, Response, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import httpx
from langgraph.checkpoint.sqlite.aio import AsyncSqliteSaver
from langgraph.checkpoint.duckdb.aio import AsyncDuckDBSaver
from langchain_core.messages import HumanMessage
from logging import getLogger

from src.modules.speechs.speech_to_text import SpeechToText
from src.modules.image.image_to_text import ImageToText
# from src.settings import settings
from src import graph_builder
from src.request_validate import SignUpLogin, ChatInput

app = FastAPI(title="What's App AI Agent")

logger = getLogger(__name__)

api_router = APIRouter()

database = "backend/chat_message.db"

load_dotenv()
# Declare the Global Instance
speech_to_text = SpeechToText()
image_to_text = ImageToText()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)


@api_router.post("/signup-login")
def signup_login(request: Request, request_data: SignUpLogin):
    name = request_data.name
    phone_no = request_data.phone_no

    with sqlite3.connect(database=database) as conn:
        cursor = conn.cursor()
        user_det = cursor.execute(f"select * from user_login where name='{name}' and phone_no='{phone_no}'").fetchone()
        if not user_det:
            user_id = cursor.execute(f"insert into user_login (name, phone_no) values('{name}', '{phone_no}')").\
                lastrowid
            conn.commit()
            request.app.user_id = user_id
        else:
            request.app.user_id = user_det[0]
        return HTTPException(detail={"status": "login success", "user": user_det}, status_code=200)


@api_router.post(path="/get-chat-message")
def get_chat_messages(request: Request):
    with sqlite3.connect(database=database) as conn:
        cursor = conn.cursor()
        chat_messages = cursor.execute(f"select * from whatapp_chat_message where user_id={request.app.user_id} "
                                       f"order by chat_time").fetchall()
        # chat_messages = cursor.execute(f"select * from whatapp_chat_message where user_id=1 order by chat_time").\
        #     fetchall()
        return HTTPException(detail=chat_messages, status_code=200)


@api_router.post(path="/whatapp-request")
async def whatapp_handler(request: Request, chat_input: ChatInput):
    """Handles incoming messages and status updates from the WhatsApp Cloud API."""
    try:
        # Get user message and handle different message types
        message = chat_input
        content = ""
        with sqlite3.connect(database=database) as conn:
            cursor = conn.cursor()
            user_id = request.app.user_id
            user_det = cursor.execute(f"select * from user_login where user_id={user_id}").fetchall()
            # user_det = cursor.execute("select * from user_login where user_id=1").fetchall()
            session_id = "-".join([str(i) for i in user_det[0]])
            cursor.execute(f'insert into whatapp_chat_message (blob_data, text_data, chat_type, msg_type, chat_time, '
                           f'user_id) '
                           f'values("{message.user_text_input if message.chat_type in ["audio", "image"] else ""}", '
                           f'{message.user_text_input if message.chat_type == "text" else ""}, '
                           f'"User", "{message.chat_type}", "{datetime.now()}", '
                           f'"{1}")')
        if message.chat_type == "audio":
            content = await process_audio_message(message.user_text_input)
        # Get image caption if any
        elif message.chat_type == "image":
            image_bytes = message.user_text_input
            try:
                description = await image_to_text.analyze_image(
                    image_data=image_bytes,
                    prompt="Please describe what you see in this image in the context of our conversation.")
                content += f"\n[Image Analysis: {description}]"
            except Exception as e:
                raise e
        else:
            content = message.user_text_input
        async with AsyncSqliteSaver.from_conn_string(conn_string=os.getenv("SHORT_TERM_MEMORY_DB_PATH")) as checkpointer:
            graph = graph_builder.compile(checkpointer=checkpointer)
            await graph.ainvoke(input={
                "messages": HumanMessage(content=content)},
                config={"configurable": {"thread_id": session_id}})

            # Get the workflow type and response from the state
            output_state = await graph.aget_state(config={"configurable": {"thread_id": session_id}})

            workflow = output_state.values.get("workflow", "")
            response_message = output_state.values["messages"][-1].content
            audio_buffer = output_state.values.get("audio_buffer", "")
            image_path = output_state.values.get("image_path", "")
            byts_str_data = ""
            chat_type = "text"
            if image_path and workflow == "image":
                with open(file=image_path, mode="rb") as image:
                    base64_str = base64.b64encode(image.read()).decode("utf-8")
                    byts_str_data = f"data:image/png;base64,{base64_str}"
                chat_type = workflow
            if audio_buffer and workflow == "audio":
                base64_str = base64.b64encode(audio_buffer).decode("utf-8")
                byts_str_data = f"data:audio/webm;codecs=opus;base64,{base64_str}"
                chat_type = workflow
            with sqlite3.connect(database=database) as conn:
                cursor = conn.cursor()
                cursor.execute(f'insert into whatapp_chat_message (blob_data, text_data, chat_type, msg_type, '
                               f'chat_time, user_id) values("{byts_str_data}", {response_message}, "Bot", '
                               f'"{chat_type}", "{datetime.now()}", "{1}")')
            return HTTPException(detail={"message": response_message, "bytes_data": byts_str_data,
                                         "workflow": ("text" if workflow == "conversation" else workflow)},
                                 status_code=200)

    except Exception as e:
        raise e


async def process_audio_message(audio_str: str) -> str:
    """Download and transcribe audio message."""
    # audio_str = ""
    audio_byte = base64.b64decode(audio_str.split(",")[1])
    audio_byte = base64.b64decode(audio_str)
    audio_content = BytesIO(audio_byte)
    audio_content.seek(0)
    audio_data = audio_content.read()
    return await speech_to_text.transcribe(audio_data=audio_data)


app.include_router(router=api_router)


# if __name__ == "__main__":
#     import uvicorn
#     uvicorn.run(app, host="127.0.0.1", port=8006)

